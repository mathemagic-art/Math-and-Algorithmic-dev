# -*- coding: utf-8 -*-
"""Limit_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJVei_16YEtaysQBKzbb7G0nnC4k4-fj
"""

import random
from sympy import symbols,oo
from sympy import limit
from sympy import simplify
x = symbols('x')

def question_generator(limit_level: int,x: str,limit:int)->str:

    question = ''
    types = {
        'Logarithmic': ['ln'],
        'Trigonometric': ['sin', 'cos', 'tan', 'cot', 'sec'],
        'Exponential': ['exp']
    }
    power = random.randint(1, 9)

    if limit_level == 1:
        coeff1 = random.randint(2, 10)
        question += "{}*x^{}".format(coeff1, power)

    if limit_level == 2:
        coeff1 = random.randint(2, 10)
        coeff2 = random.randint(2, 10)
        coeff3 = random.randint(2, 10)
        power2 = random.randint(2, 4)
        power3 = random.randint(1, 3)

        question += "{}*x^{}+{}*x^{}+{}*x^{}".format(coeff1, power, coeff2, power2, coeff3, power3)

    if limit_level == 3:
        coeff1 = random.randint(1, 5)
        function_type = random.choices(list(types.keys()), weights=(1, 4, 1))[0]
        function = random.choice(types[function_type])
        question += "{}*{}(x)+{}".format(coeff1, function, question_generator(1,x,limit))

    if limit_level == 4:
        function_type = random.choices(list(types.keys()), weights=(2, 4, 2))[0]
        function = random.choice(types[function_type])
        question += "{}({})".format(function, question_generator(1,x,limit))

    if limit_level == 5:
        operator = random.choice(('/', '*'))
        question = "({}){}({})".format(question_generator(2,x,limit), operator, question_generator(3,x,limit))

    return str(simplify(question))

func=question_generator(2,x,oo)

print(func)
def limit_generator():
  return limit(func,x,oo)

print(limit_generator())



