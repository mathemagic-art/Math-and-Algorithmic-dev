# -*- coding: utf-8 -*-
"""Rectangle_Method_Modified.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lXF5JmlWmD8TCCBaWlmVnOhXY6m-ANC_
"""

# Commented out IPython magic to ensure Python compatibility.
import sympy as sym
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sympy.abc import x
from sympy import *
import math

# func = input("Enter a function: ")
# function = sym.lambdify(x, func)
# init_point = int(input("Enter starting point: "))
# end_point = int(input("Enter ending point: "))
# num_of_interval = int(input("Number of intervals: "))

def rectangle_Method(function:str, init_point:int, end_point:int, num_of_interval:int)->str:
  x = sym.symbols('x')
  function = sym.lambdify(x, function)
  dx = (end_point - init_point)/num_of_interval
  total = 0.0
  for i in range (num_of_interval):
          total = total + function((init_point + (i*dx)))
  Area = dx*total
  return str(Area) 

a = rectangle_Method("x^2", 0, 2, 100)
print(a)
# rectangle_Method(function, init_point, end_point, num_of_interval)

def rectangle_method_graph(function, init_point, end_point, num_of_interval):
    X = np.linspace(init_point,end_point,100)
    x = np.linspace(init_point,end_point,num_of_interval+1)
    Y = function(X)
    plt.figure(figsize = (15,10))
    plt.plot(X,Y, color='black', linewidth=2, markersize=50)

    for i in range(num_of_interval):
        init_point = [x[i],x[i],x[i+1],x[i+1]]
        end_point = [0,function(x[i]),function(x[i]),0]
        plt.fill_between(init_point,end_point, edgecolor='black')
        plt.savefig('Rectangle_Method_Graph.png')
        