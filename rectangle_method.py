# -*- coding: utf-8 -*-
"""Rectangle_Method

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y3A2P3HRaojlbwXJQD7TXJrPfv5P3caQ
"""

# Commented out IPython magic to ensure Python compatibility.
import sympy as sym
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sympy.abc import x
from sympy import *
import math

func = input("Enter a function: ")
f = sym.lambdify(x, func)
a = int(input("Enter starting point: "))
b = int(input("Enter ending point: "))
n = int(input("Number of intervals: "))

def rectangle_Method(f, a, b):
  x = sym.symbols('x')
  f = sym.lambdify(x, func)
  dx = (b - a)/n
  total = 0.0
  for i in range (n):
          total = total + f((a + (i*dx)))
  Area = dx*total
  print("The area under the curve is:",Area)  
rectangle_Method(f, a, b)

def rectangle_method_graph(f,a,b):
    X = np.linspace(a,b,100)
    x = np.linspace(a,b,n+1)
    Y = f(X)
    plt.figure(figsize = (15,10))
    plt.plot(X,Y, color='black', linewidth=2, markersize=50)

    for i in range(n):
        a = [x[i],x[i],x[i+1],x[i+1]]
        b = [0,f(x[i]),f(x[i]),0]
        plt.fill_between(a,b, edgecolor='black')
        plt.savefig('Rectangle_Method_Graph.png')
rectangle_method_graph(f,a,b)